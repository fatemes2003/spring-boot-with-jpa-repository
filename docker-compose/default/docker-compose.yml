version: '3.5'
services:
  read:
    image: grafana/loki:2.9.2
    command: "-config.file=/etc/loki/config.yaml -target=read"
    ports:
      - 3101:3100
      - 7946
      - 9095
    volumes:
      - ../observ/loki/loki-config.yaml:/etc/loki/config.yaml
    depends_on:
      - minio
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: &loki-dns
      spring:
        aliases:
          - loki

  write:
    image: grafana/loki:2.9.2
    command: "-config.file=/etc/loki/config.yaml -target=write"
    ports:
      - 3102:3100
      - 7946
      - 9095
    volumes:
      - ../observ/loki/loki-config.yaml:/etc/loki/config.yaml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      - minio
    networks:
      <<: *loki-dns

  promtail:
    image: grafana/promtail:2.9.2
    volumes:
      - ../observ/promtail/promtail-local-config.yaml:/etc/promtail/config.yaml:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/config.yaml
    depends_on:
      - gateway
    networks:
      - spring

  minio:
    image: minio/minio
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/loki-data && \
        mkdir -p /data/loki-ruler && \
        minio server /data
    environment:
      - MINIO_ROOT_USER=loki
      - MINIO_ROOT_PASSWORD=supersecret
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_UPDATE=off
    ports:
      - 9000
      - 9001:9001
    volumes:
      - ./.data/minio:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 15s
      timeout: 20s
      retries: 5
    networks:
      - spring

  grafana:
    image: grafana/grafana:10.3.3
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    depends_on:
      - gateway
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /etc/grafana/provisioning/datasources
        cat <<EOF > /etc/grafana/provisioning/datasources/ds.yaml
        apiVersion: 1
        datasources:
          - name: Loki
            type: loki
            access: proxy
            url: http://gateway:3100
            jsonData:
              httpHeaderName1: "X-Scope-OrgID"
            secureJsonData:
              httpHeaderValue1: "tenant1"
        EOF
        /run.sh
    ports:
      - "3000:3000"
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - spring

  gateway:
    image: nginx:1.25.3
    depends_on:
      - read
      - write
    entrypoint:
      - sh
      - -euc
      - |
        cat <<EOF > /etc/nginx/nginx.conf
        user  nginx;
        worker_processes  5;  ## Default: 1

        events {
          worker_connections   1000;
        }

        http {
          resolver 127.0.0.11;

          server {
            listen             3100;

            location = / {
              return 200 'OK';
              auth_basic off;
            }

            location = /api/prom/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /api/prom/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /api/prom/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }

            location = /loki/api/v1/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /loki/api/v1/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /loki/api/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }
          }
        }
        EOF
        /docker-entrypoint.sh nginx -g "daemon off;"
    ports:
      - "3100:3100"
    healthcheck:
      test: [ "CMD", "service", "nginx", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - spring

  mysql:
    image: mysql:8.0
    container_name: mysql
    ports:
      - "3307:3306"
    volumes:
      - "./data/db:/var/lib/mysql"
    environment:
      MYSQL_ROOT_PASSWORD: 'test'
      MYSQL_DATABASE: 'springcloud6'
    networks:
      - mysql


  eureka:
    image: dockerfatemeh/03eureka_server:test6
    container_name: eureka
    ports:
      - "8761:8761"
    deploy:
      resources:
        limits:
          memory: 512m
    networks:
      - spring
    environment:
      - SPRING_PROFILES_ACTIVE=docker


  product:
    image: dockerfatemeh/01product:test6
    container_name: product6
    ports:
      - "8080:8080"
    deploy:
      resources:
        limits:
          memory: 512m
    networks:
      - spring
      - mysql
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - eureka
      - mysql


  discount:
    image: dockerfatemeh/02discount:test6
    container_name: discount6
    ports:
      - "8086:8086"
    deploy:
      resources:
        limits:
          memory: 512m
    networks:
      - spring
      - mysql
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - eureka
      - mysql



  notification:
    image: dockerfatemeh/05notification:test6
    container_name: notification6
    ports:
      - "8082:8082"
    deploy:
      resources:
        limits:
          memory: 512m
    networks:
      - spring
      - mysql
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - eureka
      - mysql



  apigetway:
    image: dockerfatemeh/06gateway_service:test6
    container_name: apigetway6
    ports:
      - "7070:7070"
    deploy:
      resources:
        limits:
          memory: 512m
    networks:
      - spring
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - eureka

#  rabbitmq:
#    #image: rabbitmq:latest
#    image: rabbitmq:3.9.11-management-alpine
#    container_name: 'rabbitmq'
#    ports:
#      - 5672:5672
#      - 15672:15672
#    networks:
#      - spring

networks:
  default:
  spring:
    driver: bridge
  mysql:
    driver: bridge
#volumes:
#  my-datavolume:
